package main

import (
	"fmt"
	"github.com/penberg/ustat/ustat"
	"gopkg.in/urfave/cli.v1"
	"os"
	"regexp"
	"time"
)

func main() {
	app := cli.NewApp()
	app.Name = "ustat"
	app.Usage = "Unified system statistics collector"
	app.Flags = []cli.Flag{
		cli.BoolFlag{
			Name:  "c,cpu",
			Usage: "Enable CPU stats collection",
		},
		cli.BoolFlag{
			Name:  "i,int",
			Usage: "Enable interrupt stats collection",
		},
		cli.BoolFlag{
			Name:  "n,net",
			Usage: "Enable network stats collection",
		},
		cli.BoolFlag{
			Name:  "d,disk",
			Usage: "Enable disk stats collection",
		},
		cli.StringFlag{
			Name:  "p,pattern",
			Usage: "Regular expression patter for filtering stats",
		},
	}
	app.Action = func(ctx *cli.Context) error {
		stats := make([]*ustat.Stat, 0)
		if ctx.Bool("cpu") {
			stats = append(stats, ustat.NewCpusStat())
		}
		if ctx.Bool("int") {
			stats = append(stats, ustat.NewInterruptsStat())
		}
		if ctx.Bool("net") {
			stats = append(stats, ustat.NewNetStat())
		}
		if ctx.Bool("disk") {
			stats = append(stats, ustat.NewDiskStat())
		}
		pattern := ctx.String("pattern")
		if len(stats) == 0 {
			return cli.NewExitError("No stats enabled", 1)
		}
		fmt.Printf("# This file has been generated by ustat.\n")
		fmt.Printf("#\n")
		fmt.Printf("# Column descriptions:\n")
		for _, stat := range stats {
			for _, description := range stat.Descriptions {
				matched, err := regexp.MatchString(pattern, description)
				if err != nil || !matched {
					continue
				}
				fmt.Printf("# %s\n", description)
			}
		}
		for _, stat := range stats {
			for _, name := range stat.Names {
				matched, err := regexp.MatchString(pattern, name)
				if err != nil || !matched {
					continue
				}
				fmt.Printf("%s\t", name)
			}
		}
		fmt.Println("")
		for {
			for _, stat := range stats {
				values := stat.Reader.Read()
				for idx, value := range values {
					matched, err := regexp.MatchString(pattern, stat.Names[idx])
					if err != nil || !matched {
						continue
					}
					fmt.Printf("%d\t", value)
				}
			}
			fmt.Println("")
			time.Sleep(1 * time.Second)
		}
		return nil
	}
	app.Run(os.Args)
}
